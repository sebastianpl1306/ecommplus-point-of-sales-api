import { model, Schema } from "mongoose";
import { IZReportDocument, ZReportStatus } from "../../interfaces";
import { PaymentMethodSummarySchema, ProductSummarySchema, VoidedTransactionSchema } from "./complements";

// Schema principal del reporte Z
const ZReportSchema = new Schema<IZReportDocument>({
    sessionId: {
        type: Schema.Types.ObjectId,
        ref: 'CashSession',
        required: [true, 'Session ID is required'],
        index: true
    },
    company: {
        type: Schema.Types.ObjectId,
        ref: 'Company',
        required: [true, 'Company is required'],
        index: true
    },
    pointOfSales: {
        type: Schema.Types.ObjectId,
        ref: 'PointOfSales',
        required: [true, 'Point of sales is required'],
        index: true
    },
    reportNumber: {
        type: String,
        required: [true, 'Report number is required'],
        unique: true,
        index: true
    },
    reportDate: {
        type: Date,
        required: [true, 'Report date is required'],
        default: Date.now,
        index: true
    },
    
    // Información de la sesión
    sessionNumber: {
        type: String,
        required: [true, 'Session number is required'],
        index: true
    },
    cashier: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: [true, 'Cashier is required']
    },
    sessionStartDate: {
        type: Date,
        required: [true, 'Session start date is required']
    },
    sessionEndDate: {
        type: Date,
        required: [true, 'Session end date is required']
    },
    
    // Resumen financiero
    totalTransactions: {
        type: Number,
        required: [true, 'Total transactions is required'],
        min: 0,
        default: 0
    },
    grossSales: {
        type: Number,
        required: [true, 'Gross sales is required'],
        min: 0,
        default: 0
    },
    netSales: {
        type: Number,
        required: [true, 'Net sales is required'],
        min: 0,
        default: 0
    },
    totalTax: {
        type: Number,
        required: [true, 'Total tax is required'],
        min: 0,
        default: 0
    },
    totalDiscounts: {
        type: Number,
        required: [true, 'Total discounts is required'],
        min: 0,
        default: 0
    },
    totalRefunds: {
        type: Number,
        required: [true, 'Total refunds is required'],
        min: 0,
        default: 0
    },
    
    // Por método de pago
    paymentMethodSummary: {
        type: [PaymentMethodSummarySchema],
        default: []
    },
    
    // Control de caja
    initialCash: {
        type: Number,
        required: [true, 'Initial cash is required'],
        min: 0
    },
    expectedCash: {
        type: Number,
        required: [true, 'Expected cash is required'],
        min: 0
    },
    actualCash: {
        type: Number,
        required: [true, 'Actual cash is required'],
        min: 0
    },
    cashDifference: {
        type: Number,
        required: [true, 'Cash difference is required']
    },
    
    // Productos vendidos
    topProducts: {
        type: [ProductSummarySchema],
        default: []
    },
    totalItemsSold: {
        type: Number,
        required: [true, 'Total items sold is required'],
        min: 0,
        default: 0
    },
    
    // Transacciones especiales
    voidedTransactions: {
        type: [VoidedTransactionSchema],
        default: []
    },
    voidedAmount: {
        type: Number,
        required: [true, 'Voided amount is required'],
        min: 0,
        default: 0
    },
    
    // Estadísticas adicionales
    averageOrderValue: {
        type: Number,
        required: [true, 'Average order value is required'],
        min: 0,
        default: 0
    },
    largestTransaction: {
        type: Number,
        required: [true, 'Largest transaction is required'],
        min: 0,
        default: 0
    },
    smallestTransaction: {
        type: Number,
        required: [true, 'Smallest transaction is required'],
        min: 0,
        default: 0
    },
    
    // Control y auditoría
    status: {
        type: String,
        enum: Object.values(ZReportStatus),
        required: [true, 'Status is required'],
        default: ZReportStatus.GENERATED,
        index: true
    },
    generatedAt: {
        type: Date,
        required: [true, 'Generated at is required'],
        default: Date.now
    },
    generatedBy: {
        type: Schema.Types.ObjectId,
        ref: 'User',
        required: [true, 'Generated by is required']
    },
    closedAt: {
        type: Date
    },
    closedBy: {
        type: Schema.Types.ObjectId,
        ref: 'User'
    },
    notes: {
        type: String,
        maxlength: [1000, 'Notes cannot exceed 1000 characters']
    }
}, {
    timestamps: true,
    versionKey: false
});

// Índices compuestos para optimizar consultas
ZReportSchema.index({ company: 1, reportDate: -1 });
ZReportSchema.index({ pointOfSales: 1, reportDate: -1 });
ZReportSchema.index({ company: 1, status: 1, reportDate: -1 });

// Crear y exportar el modelo
export const ZReportModel = model<IZReportDocument>('ZReport', ZReportSchema);